#!/usr/bin/env python3
"""
Exemplo de Uso do Sistema Tem√°tico com Audiobooks
"""
import sys
from pathlib import Path
import logging

# Adiciona o diret√≥rio atual ao path
sys.path.append(str(Path(__file__).parent))

from thematic_summary_generator import ThematicSummaryGenerator
from document_processor import DocumentProcessor
from config import *

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def exemplo_sistema_tematico():
    """Exemplo de uso do sistema tem√°tico"""
    
    print("üéØ Exemplo de Uso do Sistema Tem√°tico com Audiobooks")
    print("=" * 60)
    
    try:
        # 1. Inicializa o sistema
        print("\nüîß Passo 1: Inicializando sistema tem√°tico...")
        
        thematic_generator = ThematicSummaryGenerator()
        document_processor = DocumentProcessor()
        
        print("  ‚úÖ Sistema tem√°tico inicializado")
        
        # 2. Processa documentos de exemplo
        print("\nüìÑ Passo 2: Processando documentos de exemplo...")
        
        # Cria documentos de exemplo
        example_documents = create_example_documents()
        
        print(f"  ‚úÖ {len(example_documents)} documentos de exemplo criados")
        
        # 3. Processa documentos tematicamente
        print("\nüéØ Passo 3: Processando documentos tematicamente...")
        
        result = thematic_generator.process_documents_thematically(example_documents)
        
        if result['success']:
            print("  ‚úÖ Processamento tem√°tico conclu√≠do com sucesso")
            
            # Mostra estat√≠sticas
            stats = result['stats']
            print(f"  üìä Estat√≠sticas:")
            print(f"    - Documentos processados: {stats['total_documents']}")
            print(f"    - Temas identificados: {stats['total_themes']}")
            print(f"    - Resumos gerados: {stats['successful_summaries']}")
            print(f"    - Audiobooks gerados: {stats['successful_audiobooks']}")
            
            # Mostra temas identificados
            thematic_groups = result['thematic_groups']
            print(f"\n  üéØ Temas identificados:")
            for theme, docs in thematic_groups.items():
                print(f"    - {theme}: {len(docs)} documentos")
            
            # Mostra estrutura criada
            thematic_dirs = result['thematic_dirs']
            print(f"\n  üìÅ Estrutura criada:")
            for theme, theme_dir in thematic_dirs.items():
                print(f"    - {theme}: {theme_dir}")
            
        else:
            print(f"  ‚ùå Erro no processamento: {result.get('error')}")
            return False
        
        # 4. Mostra resultados
        print("\nüìã Passo 4: Mostrando resultados...")
        
        print(f"  üìÑ Resumo geral: {result['general_summary_path']}")
        
        # Mostra resumos tem√°ticos
        summary_results = result['summary_results']
        print(f"\n  üìö Resumos tem√°ticos gerados:")
        for theme, summary_info in summary_results.items():
            if summary_info['success']:
                print(f"    - {theme}: {summary_info['summary_path']}")
        
        # Mostra audiobooks
        audiobook_results = result['audiobook_results']
        print(f"\n  üéß Audiobooks gerados:")
        for theme, audio_info in audiobook_results.items():
            if audio_info['success']:
                print(f"    - {theme}: {audio_info['output_path']}")
            else:
                print(f"    - {theme}: Erro - {audio_info.get('error')}")
        
        # 5. Resumo final
        print(f"\nüéâ Sistema Tem√°tico com Audiobooks Funcionando!")
        print("=" * 60)
        print(f"‚úÖ An√°lise tem√°tica autom√°tica")
        print(f"‚úÖ Separa√ß√£o de documentos por temas")
        print(f"‚úÖ Gera√ß√£o de resumos tem√°ticos")
        print(f"‚úÖ Gera√ß√£o de audiobooks em portugu√™s")
        print(f"‚úÖ Estrutura organizacional por temas")
        print(f"‚úÖ Estat√≠sticas detalhadas")
        
        print(f"\nüöÄ Funcionalidades implementadas:")
        print(f"  üéØ Classifica√ß√£o autom√°tica de temas")
        print(f"  üìö Agrupamento de documentos por tema")
        print(f"  üìÑ Resumos tem√°ticos em Markdown")
        print(f"  üéß Audiobooks em portugu√™s (MP3)")
        print(f"  üìÅ Estrutura organizacional")
        print(f"  üìä An√°lise de confian√ßa tem√°tica")
        
        return True
        
    except Exception as e:
        logger.error(f"Error in thematic system example: {e}")
        print(f"‚ùå Erro no exemplo: {e}")
        return False

def create_example_documents():
    """Cria documentos de exemplo para demonstra√ß√£o"""
    try:
        documents = []
        
        # Documento sobre IA
        ia_doc = {
            'file_path': 'documents/curso_ia.txt',
            'content': {
                'text': '''
                Curso de Intelig√™ncia Artificial - Universidade

                M√≥dulo 1: Fundamentos da Intelig√™ncia Artificial
                A Intelig√™ncia Artificial (IA) √© um campo da ci√™ncia da computa√ß√£o que se dedica √† cria√ß√£o de sistemas capazes de realizar tarefas que normalmente requerem intelig√™ncia humana.

                Conceitos fundamentais:
                - Algoritmos inteligentes
                - Aprendizado de m√°quina
                - Processamento de linguagem natural
                - Vis√£o computacional
                - Sistemas especialistas

                M√≥dulo 2: Machine Learning
                Machine Learning √© um subcampo da IA que permite aos sistemas aprenderem e melhorarem automaticamente atrav√©s da experi√™ncia, sem serem explicitamente programados.

                Algoritmos principais:
                - Regress√£o Linear
                - √Årvores de Decis√£o
                - Random Forest
                - Support Vector Machines
                - Redes Neurais
                '''
            },
            'metadata': {
                'filename': 'curso_ia.txt',
                'size_bytes': 1500
            }
        }
        documents.append(ia_doc)
        
        # Documento sobre programa√ß√£o
        prog_doc = {
            'file_path': 'documents/algoritmos_ml.txt',
            'content': {
                'text': '''
                Algoritmos de Machine Learning - Guia Completo

                1. Algoritmos de Classifica√ß√£o
                Regress√£o Log√≠stica: Usado para classifica√ß√£o bin√°ria e multiclasse, baseado em probabilidades.

                √Årvores de Decis√£o: F√°ceis de interpretar com regras if-then, n√£o requerem normaliza√ß√£o.

                Random Forest: Combina√ß√£o de m√∫ltiplas √°rvores que reduz overfitting atrav√©s de bagging.

                SVM: Encontra o hiperplano de separa√ß√£o √≥timo, funciona bem em espa√ßos de alta dimens√£o.

                2. Algoritmos de Regress√£o
                Regress√£o Linear: Para previs√£o de valores cont√≠nuos.

                Ridge Regression: Adiciona regulariza√ß√£o L2 para reduzir overfitting.

                Lasso Regression: Adiciona regulariza√ß√£o L1 para sele√ß√£o de features.
                '''
            },
            'metadata': {
                'filename': 'algoritmos_ml.txt',
                'size_bytes': 2000
            }
        }
        documents.append(prog_doc)
        
        # Documento sobre matem√°tica
        math_doc = {
            'file_path': 'documents/deep_learning.txt',
            'content': {
                'text': '''
                Deep Learning e Redes Neurais - Fundamentos e Aplica√ß√µes

                1. Introdu√ß√£o ao Deep Learning
                Deep Learning √© um subcampo do Machine Learning que utiliza redes neurais artificiais com m√∫ltiplas camadas para aprender representa√ß√µes hier√°rquicas dos dados.

                2. Arquiteturas de Redes Neurais
                Perceptron Multicamadas (MLP): M√∫ltiplas camadas densas para classifica√ß√£o e regress√£o.

                Redes Neurais Convolucionais (CNN): Especializadas em dados espaciais como imagens.

                Redes Neurais Recorrentes (RNN): Para processar sequ√™ncias temporais.

                Transformers: Arquitetura baseada em aten√ß√£o para processamento de linguagem natural.

                3. Aplica√ß√µes Pr√°ticas
                Vis√£o Computacional: Classifica√ß√£o de imagens, detec√ß√£o de objetos.

                Processamento de Linguagem Natural: Tradu√ß√£o, sumariza√ß√£o, chatbots.

                Reconhecimento de Fala: Convers√£o de fala para texto.
                '''
            },
            'metadata': {
                'filename': 'deep_learning.txt',
                'size_bytes': 1800
            }
        }
        documents.append(math_doc)
        
        return documents
        
    except Exception as e:
        logger.error(f"Error creating example documents: {e}")
        return []

def main():
    """Fun√ß√£o principal"""
    print("üß™ Iniciando exemplo do sistema tem√°tico...")
    
    # Executa exemplo
    success = exemplo_sistema_tematico()
    
    if success:
        print("\n‚úÖ Exemplo do sistema tem√°tico conclu√≠do com sucesso!")
        print("üéâ Sistema tem√°tico com audiobooks funcionando!")
    else:
        print("\n‚ùå Exemplo falhou. Verifique os logs para mais detalhes.")

if __name__ == "__main__":
    main()
