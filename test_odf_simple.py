#!/usr/bin/env python3
"""
Teste Simplificado do Suporte a Open Document Format (ODF)
"""
import sys
import os
from pathlib import Path
import logging

# Adiciona o diret√≥rio atual ao path
sys.path.append(str(Path(__file__).parent))

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_odf_support():
    """Testa o suporte a ODF de forma simplificada"""
    
    print("üìÑ Teste do Suporte a Open Document Format (ODF)")
    print("=" * 60)
    
    try:
        # 1. Testa importa√ß√£o do processador ODF
        print("\nüîß Passo 1: Testando importa√ß√£o do processador ODF...")
        
        try:
            from processors.odf_processor import ODFProcessor
            print("  ‚úÖ ODFProcessor importado com sucesso")
        except ImportError as e:
            print(f"  ‚ùå Erro ao importar ODFProcessor: {e}")
            return False
        
        # 2. Testa inicializa√ß√£o do processador
        print("\nüîß Passo 2: Testando inicializa√ß√£o do processador...")
        
        try:
            odf_processor = ODFProcessor()
            print("  ‚úÖ ODFProcessor inicializado com sucesso")
        except Exception as e:
            print(f"  ‚ùå Erro ao inicializar ODFProcessor: {e}")
            return False
        
        # 3. Testa informa√ß√µes do processador
        print("\nüìã Passo 3: Testando informa√ß√µes do processador...")
        
        try:
            info = odf_processor.get_processor_info()
            print(f"  ‚úÖ Nome: {info['name']}")
            print(f"  ‚úÖ Vers√£o: {info['version']}")
            print(f"  ‚úÖ Descri√ß√£o: {info['description']}")
            print(f"  ‚úÖ Formatos suportados:")
            for ext, desc in info['supported_formats'].items():
                print(f"    - {ext}: {desc}")
        except Exception as e:
            print(f"  ‚ùå Erro ao obter informa√ß√µes: {e}")
            return False
        
        # 4. Testa extens√µes suportadas
        print("\nüìã Passo 4: Testando extens√µes suportadas...")
        
        try:
            supported_exts = odf_processor.get_supported_extensions()
            print(f"  ‚úÖ Extens√µes suportadas: {supported_exts}")
            
            # Testa cada extens√£o
            for ext in supported_exts:
                test_file = f"test{ext}"
                can_process = odf_processor.can_process(test_file)
                status = "‚úÖ Suportado" if can_process else "‚ùå N√£o suportado"
                print(f"    - {ext}: {status}")
        except Exception as e:
            print(f"  ‚ùå Erro ao testar extens√µes: {e}")
            return False
        
        # 5. Testa configura√ß√£o
        print("\n‚öôÔ∏è Passo 5: Testando configura√ß√£o...")
        
        try:
            from config import SUPPORTED_EXTENSIONS
            print("  ‚úÖ Configura√ß√£o importada com sucesso")
            
            if 'odf' in SUPPORTED_EXTENSIONS:
                odf_exts = SUPPORTED_EXTENSIONS['odf']
                print(f"  ‚úÖ Extens√µes ODF configuradas: {odf_exts}")
                
                # Verifica se todas as extens√µes ODF est√£o configuradas
                expected_exts = ['.odt', '.ods', '.odp']
                missing_exts = [ext for ext in expected_exts if ext not in odf_exts]
                
                if not missing_exts:
                    print("  ‚úÖ Todas as extens√µes ODF est√£o configuradas")
                else:
                    print(f"  ‚ùå Extens√µes ODF faltando: {missing_exts}")
            else:
                print("  ‚ùå Configura√ß√£o ODF n√£o encontrada")
                return False
        except Exception as e:
            print(f"  ‚ùå Erro ao verificar configura√ß√£o: {e}")
            return False
        
        # 6. Testa funcionalidades b√°sicas
        print("\nüß™ Passo 6: Testando funcionalidades b√°sicas...")
        
        try:
            # Testa limpeza de texto
            test_text = "  Este √© um   texto de teste  \n\n  com espa√ßos extras  "
            cleaned = odf_processor._clean_text(test_text)
            print(f"  ‚úÖ Limpeza de texto funcionando")
            print(f"    Original: '{test_text}'")
            print(f"    Limpo: '{cleaned}'")
            
            # Testa extra√ß√£o de texto recursiva
            import xml.etree.ElementTree as ET
            test_xml = ET.fromstring('<root><p>Texto 1</p><p>Texto 2</p></root>')
            text_parts = []
            odf_processor._extract_text_recursive(test_xml, text_parts)
            print(f"  ‚úÖ Extra√ß√£o de texto XML funcionando")
            print(f"    Texto extra√≠do: {text_parts}")
            
        except Exception as e:
            print(f"  ‚ùå Erro ao testar funcionalidades: {e}")
            return False
        
        # 7. Resumo final
        print(f"\nüéâ Teste do Suporte ODF Conclu√≠do com Sucesso!")
        print("=" * 60)
        print(f"‚úÖ Processador ODF implementado")
        print(f"‚úÖ Suporte a .odt, .ods, .odp configurado")
        print(f"‚úÖ Configura√ß√£o atualizada")
        print(f"‚úÖ Funcionalidades b√°sicas testadas")
        
        print(f"\nüöÄ Funcionalidades ODF implementadas:")
        print(f"  üìÑ ODT: Documentos de texto do LibreOffice Writer")
        print(f"  üìä ODS: Planilhas do LibreOffice Calc")
        print(f"  üéØ ODP: Apresenta√ß√µes do LibreOffice Impress")
        print(f"  üîç Extra√ß√£o de metadados")
        print(f"  üßπ Limpeza e formata√ß√£o de texto")
        print(f"  üìä Contagem de palavras e caracteres")
        print(f"  üîó Integra√ß√£o com DocumentProcessor")
        
        print(f"\nüìã Pr√≥ximos passos:")
        print(f"  1. Adicionar documentos ODF reais para teste")
        print(f"  2. Testar processamento completo")
        print(f"  3. Integrar com sistema RAG aprimorado")
        
        return True
        
    except Exception as e:
        logger.error(f"Error in ODF test: {e}")
        print(f"‚ùå Erro no teste: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üß™ Iniciando teste simplificado do suporte a ODF...")
    
    # Executa teste
    success = test_odf_support()
    
    if success:
        print("\n‚úÖ Teste do suporte ODF conclu√≠do com sucesso!")
        print("üéâ Suporte a Open Document Format implementado!")
    else:
        print("\n‚ùå Teste falhou. Verifique os logs para mais detalhes.")

if __name__ == "__main__":
    main()
